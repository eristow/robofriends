{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","actions.js","constants.js","reducers.js","index.js","createStore.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","src","alt","style","height","width","CardList","data","map","item","key","SearchBox","searchField","searchChange","type","aria-label","placeholder","onChange","Scroll","children","overflowY","border","ErrorBoundary","props","hasError","info","this","setState","Component","CounterButton","color","useState","count","setCount","onClick","Header","React","memo","MainPage","robots","isPending","onSearchChange","onRequestRobots","useEffect","length","Object","keys","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","e","payload","target","value","fetch","response","json","initialStateSearch","action","initialStateRobots","message","store","rootReducer","combineReducers","composeEnhancers","compose","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middlewares","thunkMiddleware","logger","createLogger","push","enhancers","applyMiddleware","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d5e7b870.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  const imgStyle = {\r\n    height: '200px',\r\n    width: '200px',\r\n  };\r\n\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img\r\n        src={`https://robohash.org/${id}?size=200x200`}\r\n        alt=\"robot\"\r\n        style={imgStyle}\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ data }) => {\r\n  return (\r\n    <>\r\n      {data.map((item) => (\r\n        <Card key={item.id} id={item.id} name={item.name} email={item.email} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <label>\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          aria-label=\"Search Robots\"\r\n          placeholder=\"Search Robots\"\r\n          onChange={searchChange}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = ({ children }) => {\r\n  const styles = {\r\n    overflowY: 'scroll',\r\n    border: '5px solid black',\r\n    height: '800px',\r\n  };\r\n\r\n  return <div style={styles}>{children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    const { hasError } = this.state;\r\n\r\n    if (hasError) {\r\n      return <h1>Sorry, an error occurred.</h1>;\r\n    }\r\n\r\n    return children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useState } from 'react';\n\nconst CounterButton = ({ color }) => {\n  const [count, setCount] = useState(0);\n\n  const updateCount = () => setCount(count + 1);\n\n  return (\n    <button id=\"counter\" color={color} onClick={updateCount}>\n      Count: {count}\n    </button>\n  );\n};\n\nexport default CounterButton;\n","import React from 'react';\n\nimport CounterButton from './CounterButton';\n\nconst Header = React.memo(() => {\n  return (\n    <div>\n      <h1 className=\"f1\">RoboFriends</h1>\n      <CounterButton color={'red'} />\n    </div>\n  );\n});\n\nexport default Header;\n","import React, { useEffect } from 'react';\n\nimport './MainPage.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nconst MainPage = ({\n  searchField,\n  robots,\n  isPending,\n  error,\n  onSearchChange,\n  onRequestRobots,\n}) => {\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  if (isPending) {\n    return <h1>Loading</h1>;\n  }\n\n  if (robots.length === 0 || Object.keys(robots).length === 0 || error) {\n    return <h1>Error: {error}</h1>;\n  }\n\n  const filteredRobots = robots.filter((robot) =>\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox\n        id=\"searchBox\"\n        searchChange={onSearchChange}\n        searchField={searchField}\n      />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList id=\"cardList\" data={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './App.css';\r\nimport MainPage from '../components/MainPage';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nconst App = (props) => {\r\n  return <MainPage {...props} />;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchChange: (e) => dispatch(setSearchField(e.target.value)),\r\n  onRequestRobots: () => dispatch(requestRobots()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  return fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload.message, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport 'tachyons';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport configureStore from './createStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nexport default function configureStore() {\r\n  const isDev = process.env.NODE_ENV !== 'development';\r\n\r\n  const rootReducer = combineReducers({ searchRobots, requestRobots });\r\n\r\n  let composeEnhancers = compose;\r\n\r\n  if (isDev && typeof window === 'object') {\r\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n  }\r\n\r\n  const middlewares = [thunkMiddleware];\r\n\r\n  if (isDev) {\r\n    const logger = createLogger();\r\n    middlewares.push(logger);\r\n  }\r\n\r\n  const enhancers = [applyMiddleware(...middlewares)];\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    compose(composeEnhancers(...enhancers))\r\n  );\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}